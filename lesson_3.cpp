#include <iostream> 
using namespace std; 

// Функция обмена по значению (не изменяет оригинальные переменные)
void obmen1(int x, int y) {
    int temp = x; // Сохраняем значение x во временной переменной temp
    x = y; // Присваиваем y переменной x (изменяем только локальную копию)
    y = temp; // Присваиваем temp переменной y (изменяем только локальную копию)
}

// Функция обмена по указателям (изменяет оригинальные переменные)
void obmen2(int* x, int* y) {
    int temp = *x; // Сохраняем значение по адресу x во временной переменной temp
    *x = *y; // Присваиваем значение по адресу y переменной по адресу x (изменяем оригинальные переменные)
    *y = temp; // Присваиваем temp значению по адресу y (изменяем оригинальные переменные)
}

// Функция обмена по ссылкам (изменяет оригинальные переменные)
void obmen3(int& x, int& y) {
    int temp = x; // Сохраняем значение x во временной переменной temp
    x = y; // Присваиваем y переменной x (изменяем оригинальные переменные)
    y = temp; // Присваиваем temp переменной y (изменяем оригинальные переменные)
}

int main(void) {
    setlocale(LC_CTYPE, "Russian"); // Для отображения русских символов
    int a = 2, b = 5; // Объявляем и инициализируем две целочисленные переменные a и b

    cout << "до обмена:  a=" << a << " b=" << b << endl; // Выводим значения a и b до обмена

    // Вызов obmen1
    obmen1(a, b); // Обмен значений a и b по значению (оригиналы не изменяются)
    cout << "после обмена 1:  a=" << a << " b=" << b << endl; 

    // Вызов obmen2
    obmen2(&a, &b); // Обмен значений a и b по указателям (оригиналы изменяются)
    cout << "после обмена 2:  a=" << a << " b=" << b << endl; 

    // Вызов obmen3
    obmen3(a, b); // Обмен значений a и b по ссылкам (оригиналы изменяются)
    cout << "после обмена 3:  a=" << a << " b=" << b << endl; 

    return 0; // Завершаем программу возврата 0
}

